<?php
namespace Semir\Laravel2impala\ThriftGenerated;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Metadata information about the results.
 * Applicable only for SELECT.
 */
class ResultsMetadata
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'schema',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\ThriftGenerated\metastore\Schema',
        ),
        2 => array(
            'var' => 'table_dir',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'in_tablename',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'delim',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * The schema of the results
     * 
     * @var \ThriftGenerated\metastore\Schema
     */
    public $schema = null;
    /**
     * The directory containing the results. Not applicable for partition table.
     * 
     * @var string
     */
    public $table_dir = null;
    /**
     * If the results are straight from an existing table, the table name.
     * 
     * @var string
     */
    public $in_tablename = null;
    /**
     * Field delimiter
     * 
     * @var string
     */
    public $delim = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['schema'])) {
                $this->schema = $vals['schema'];
            }
            if (isset($vals['table_dir'])) {
                $this->table_dir = $vals['table_dir'];
            }
            if (isset($vals['in_tablename'])) {
                $this->in_tablename = $vals['in_tablename'];
            }
            if (isset($vals['delim'])) {
                $this->delim = $vals['delim'];
            }
        }
    }

    public function getName()
    {
        return 'ResultsMetadata';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->schema = new \ThriftGenerated\metastore\Schema();
                        $xfer += $this->schema->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->table_dir);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->in_tablename);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->delim);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ResultsMetadata');
        if ($this->schema !== null) {
            if (!is_object($this->schema)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('schema', TType::STRUCT, 1);
            $xfer += $this->schema->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->table_dir !== null) {
            $xfer += $output->writeFieldBegin('table_dir', TType::STRING, 2);
            $xfer += $output->writeString($this->table_dir);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->in_tablename !== null) {
            $xfer += $output->writeFieldBegin('in_tablename', TType::STRING, 3);
            $xfer += $output->writeString($this->in_tablename);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->delim !== null) {
            $xfer += $output->writeFieldBegin('delim', TType::STRING, 4);
            $xfer += $output->writeString($this->delim);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
